/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.shaice.bigdata.superwebanalytics.schema;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-12")
public class PageViewEdge implements org.apache.thrift.TBase<PageViewEdge, PageViewEdge._Fields>, java.io.Serializable, Cloneable, Comparable<PageViewEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PageViewEdge");

  private static final org.apache.thrift.protocol.TField PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("person", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("nonce", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PageViewEdgeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PageViewEdgeTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable PersonID person; // required
  private @org.apache.thrift.annotation.Nullable PageID page; // required
  private long nonce; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PERSON((short)1, "person"),
    PAGE((short)2, "page"),
    NONCE((short)3, "nonce");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PERSON
          return PERSON;
        case 2: // PAGE
          return PAGE;
        case 3: // NONCE
          return NONCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NONCE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PERSON, new org.apache.thrift.meta_data.FieldMetaData("person", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonID.class)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PageID.class)));
    tmpMap.put(_Fields.NONCE, new org.apache.thrift.meta_data.FieldMetaData("nonce", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PageViewEdge.class, metaDataMap);
  }

  public PageViewEdge() {
  }

  public PageViewEdge(
    PersonID person,
    PageID page,
    long nonce)
  {
    this();
    this.person = person;
    this.page = page;
    this.nonce = nonce;
    set_nonce_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PageViewEdge(PageViewEdge other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_person()) {
      this.person = new PersonID(other.person);
    }
    if (other.is_set_page()) {
      this.page = new PageID(other.page);
    }
    this.nonce = other.nonce;
  }

  public PageViewEdge deepCopy() {
    return new PageViewEdge(this);
  }

  @Override
  public void clear() {
    this.person = null;
    this.page = null;
    set_nonce_isSet(false);
    this.nonce = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public PersonID get_person() {
    return this.person;
  }

  public void set_person(@org.apache.thrift.annotation.Nullable PersonID person) {
    this.person = person;
  }

  public void unset_person() {
    this.person = null;
  }

  /** Returns true if field person is set (has been assigned a value) and false otherwise */
  public boolean is_set_person() {
    return this.person != null;
  }

  public void set_person_isSet(boolean value) {
    if (!value) {
      this.person = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public PageID get_page() {
    return this.page;
  }

  public void set_page(@org.apache.thrift.annotation.Nullable PageID page) {
    this.page = page;
  }

  public void unset_page() {
    this.page = null;
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean is_set_page() {
    return this.page != null;
  }

  public void set_page_isSet(boolean value) {
    if (!value) {
      this.page = null;
    }
  }

  public long get_nonce() {
    return this.nonce;
  }

  public void set_nonce(long nonce) {
    this.nonce = nonce;
    set_nonce_isSet(true);
  }

  public void unset_nonce() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NONCE_ISSET_ID);
  }

  /** Returns true if field nonce is set (has been assigned a value) and false otherwise */
  public boolean is_set_nonce() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NONCE_ISSET_ID);
  }

  public void set_nonce_isSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NONCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PERSON:
      if (value == null) {
        unset_person();
      } else {
        set_person((PersonID)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unset_page();
      } else {
        set_page((PageID)value);
      }
      break;

    case NONCE:
      if (value == null) {
        unset_nonce();
      } else {
        set_nonce((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PERSON:
      return get_person();

    case PAGE:
      return get_page();

    case NONCE:
      return get_nonce();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PERSON:
      return is_set_person();
    case PAGE:
      return is_set_page();
    case NONCE:
      return is_set_nonce();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PageViewEdge)
      return this.equals((PageViewEdge)that);
    return false;
  }

  public boolean equals(PageViewEdge that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_person = true && this.is_set_person();
    boolean that_present_person = true && that.is_set_person();
    if (this_present_person || that_present_person) {
      if (!(this_present_person && that_present_person))
        return false;
      if (!this.person.equals(that.person))
        return false;
    }

    boolean this_present_page = true && this.is_set_page();
    boolean that_present_page = true && that.is_set_page();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (!this.page.equals(that.page))
        return false;
    }

    boolean this_present_nonce = true;
    boolean that_present_nonce = true;
    if (this_present_nonce || that_present_nonce) {
      if (!(this_present_nonce && that_present_nonce))
        return false;
      if (this.nonce != that.nonce)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_set_person()) ? 131071 : 524287);
    if (is_set_person())
      hashCode = hashCode * 8191 + person.hashCode();

    hashCode = hashCode * 8191 + ((is_set_page()) ? 131071 : 524287);
    if (is_set_page())
      hashCode = hashCode * 8191 + page.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(nonce);

    return hashCode;
  }

  @Override
  public int compareTo(PageViewEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(is_set_person()).compareTo(other.is_set_person());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_person()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.person, other.person);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_page()).compareTo(other.is_set_page());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_page()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(is_set_nonce()).compareTo(other.is_set_nonce());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_nonce()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonce, other.nonce);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PageViewEdge(");
    boolean first = true;

    sb.append("person:");
    if (this.person == null) {
      sb.append("null");
    } else {
      sb.append(this.person);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    if (this.page == null) {
      sb.append("null");
    } else {
      sb.append(this.page);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nonce:");
    sb.append(this.nonce);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_person()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'person' is unset! Struct:" + toString());
    }

    if (!is_set_page()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'page' is unset! Struct:" + toString());
    }

    if (!is_set_nonce()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nonce' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageViewEdgeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PageViewEdgeStandardScheme getScheme() {
      return new PageViewEdgeStandardScheme();
    }
  }

  private static class PageViewEdgeStandardScheme extends org.apache.thrift.scheme.StandardScheme<PageViewEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PageViewEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.person = new PersonID();
              struct.person.read(iprot);
              struct.set_person_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.page = new PageID();
              struct.page.read(iprot);
              struct.set_page_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NONCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nonce = iprot.readI64();
              struct.set_nonce_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PageViewEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.person != null) {
        oprot.writeFieldBegin(PERSON_FIELD_DESC);
        struct.person.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.page != null) {
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        struct.page.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NONCE_FIELD_DESC);
      oprot.writeI64(struct.nonce);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageViewEdgeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PageViewEdgeTupleScheme getScheme() {
      return new PageViewEdgeTupleScheme();
    }
  }

  private static class PageViewEdgeTupleScheme extends org.apache.thrift.scheme.TupleScheme<PageViewEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PageViewEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.person.write(oprot);
      struct.page.write(oprot);
      oprot.writeI64(struct.nonce);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PageViewEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.person = new PersonID();
      struct.person.read(iprot);
      struct.set_person_isSet(true);
      struct.page = new PageID();
      struct.page.read(iprot);
      struct.set_page_isSet(true);
      struct.nonce = iprot.readI64();
      struct.set_nonce_isSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

